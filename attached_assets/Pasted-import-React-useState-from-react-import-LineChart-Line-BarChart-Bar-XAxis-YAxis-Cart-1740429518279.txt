import React, { useState } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { MessageSquare } from 'lucide-react';

// Sample data
const campaignData = [
  { id: 1, name: 'Summer Promo', retailer: 'Walmart', brand: 'Brand A', startDate: '2024-06-01', endDate: '2024-07-15', budget: 85000, impressions: 3200000, cpm: 26.56, roas: 4.2, salesLift: 15.3, incrementalSales: 357000, testStores: 450 },
  { id: 2, name: 'Back to School', retailer: 'Target', brand: 'Brand B', startDate: '2024-08-01', endDate: '2024-09-15', budget: 120000, impressions: 5100000, cpm: 23.53, roas: 3.8, salesLift: 12.7, incrementalSales: 456000, testStores: 380 },
  { id: 3, name: 'Holiday Special', retailer: 'Walmart', brand: 'Brand A', startDate: '2024-11-15', endDate: '2024-12-31', budget: 180000, impressions: 7800000, cpm: 23.08, roas: 5.2, salesLift: 24.5, incrementalSales: 936000, testStores: 520 },
  { id: 4, name: 'Spring Event', retailer: 'Target', brand: 'Brand C', startDate: '2024-03-01', endDate: '2024-04-15', budget: 75000, impressions: 2800000, cpm: 26.79, roas: 3.5, salesLift: 10.2, incrementalSales: 262500, testStores: 320 },
  { id: 5, name: 'Easter Promo', retailer: 'Kroger', brand: 'Brand B', startDate: '2024-03-15', endDate: '2024-04-10', budget: 65000, impressions: 2200000, cpm: 29.55, roas: 3.1, salesLift: 8.5, incrementalSales: 201500, testStores: 280 },
  { id: 6, name: 'Fall Campaign', retailer: 'Target', brand: 'Brand A', startDate: '2024-09-15', endDate: '2024-10-31', budget: 95000, impressions: 3800000, cpm: 25.00, roas: 3.9, salesLift: 14.2, incrementalSales: 370500, testStores: 410 },
  { id: 7, name: 'Winter Deals', retailer: 'Walmart', brand: 'Brand C', startDate: '2024-01-10', endDate: '2024-02-28', budget: 110000, impressions: 4500000, cpm: 24.44, roas: 3.4, salesLift: 11.8, incrementalSales: 374000, testStores: 390 },
  { id: 8, name: 'Prime Days', retailer: 'Amazon', brand: 'Brand B', startDate: '2024-07-12', endDate: '2024-07-18', budget: 130000, impressions: 6200000, cpm: 20.97, roas: 4.8, salesLift: 22.3, incrementalSales: 624000, testStores: 0 }
];

const timeSeriesData = [
  { week: 'Week 1', 'Summer Promo': 25000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 21000, 'Easter Promo': 18000, 'Fall Campaign': 0, 'Winter Deals': 32000, 'Prime Days': 0 },
  { week: 'Week 2', 'Summer Promo': 32000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 25000, 'Easter Promo': 22000, 'Fall Campaign': 0, 'Winter Deals': 35000, 'Prime Days': 0 },
  { week: 'Week 3', 'Summer Promo': 38000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 28000, 'Easter Promo': 27000, 'Fall Campaign': 0, 'Winter Deals': 30000, 'Prime Days': 0 },
  { week: 'Week 4', 'Summer Promo': 42000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 31000, 'Easter Promo': 29000, 'Fall Campaign': 0, 'Winter Deals': 38000, 'Prime Days': 0 },
  { week: 'Week 5', 'Summer Promo': 45000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 35000, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 42000, 'Prime Days': 0 },
  { week: 'Week 6', 'Summer Promo': 48000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 33000, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 45000, 'Prime Days': 0 },
  { week: 'Week 7', 'Summer Promo': 51000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 35000, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 47000, 'Prime Days': 0 },
  { week: 'Week 8', 'Summer Promo': 48000, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 9', 'Summer Promo': 0, 'Back to School': 42000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 10', 'Summer Promo': 0, 'Back to School': 50000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 62400 },
  { week: 'Week 11', 'Summer Promo': 0, 'Back to School': 58000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 12', 'Summer Promo': 0, 'Back to School': 65000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 13', 'Summer Promo': 0, 'Back to School': 70000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 31000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 14', 'Summer Promo': 0, 'Back to School': 68000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 38000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 15', 'Summer Promo': 0, 'Back to School': 63000, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 45000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 16', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 53000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 17', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 60000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 18', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 59000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 19', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 52000, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 20', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 21', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 0, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 22', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 70000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 23', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 85000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 24', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 120000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 25', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 170000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 26', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 250000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 },
  { week: 'Week 27', 'Summer Promo': 0, 'Back to School': 0, 'Holiday Special': 241000, 'Spring Event': 0, 'Easter Promo': 0, 'Fall Campaign': 0, 'Winter Deals': 0, 'Prime Days': 0 }
];

// Colors for campaigns
const campaignColors = {
  'Summer Promo': '#8884d8',
  'Back to School': '#82ca9d',
  'Holiday Special': '#ff7300',
  'Spring Event': '#0088fe',
  'Easter Promo': '#ff8042',
  'Fall Campaign': '#8dd1e1',
  'Winter Deals': '#a4de6c',
  'Prime Days': '#d0ed57'
};

const regionColors = {
  'Northeast': '#003f5c',
  'Midwest': '#7a5195', 
  'South': '#ef5675',
  'West': '#ffa600'
};

const regionMetrics = [
  { region: 'Northeast', impressions: 5.2, budget: 110, sales: 3.8, incrementalSales: 4.1, roas: 3.7 },
  { region: 'Midwest', impressions: 8.1, budget: 180, sales: 6.9, incrementalSales: 7.2, roas: 4.0 },
  { region: 'South', impressions: 11.5, budget: 260, sales: 13.7, incrementalSales: 12.8, roas: 4.9 },
  { region: 'West', impressions: 10.8, budget: 210, sales: 11.5, incrementalSales: 11.0, roas: 5.2 }
];

// Filter options
const retailers = ['All', 'Walmart', 'Target', 'Kroger', 'Amazon'];
const brands = ['All', 'Brand A', 'Brand B', 'Brand C'];
const mediaTypes = ['All', 'Display', 'Social', 'Video', 'Search'];
const metrics = ['ROAS', 'Sales Lift %', 'Incremental $', 'Impressions', 'Budget'];

// Custom Card component
const Card = ({ children, className = "" }) => {
  return (
    <div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}>
      {children}
    </div>
  );
};

// Custom CardHeader component
const CardHeader = ({ children }) => {
  return (
    <div className="px-6 py-4 border-b border-gray-200">
      {children}
    </div>
  );
};

// Custom CardTitle component
const CardTitle = ({ children }) => {
  return (
    <h3 className="text-lg font-semibold text-gray-800">
      {children}
    </h3>
  );
};

// Custom CardContent component
const CardContent = ({ children }) => {
  return (
    <div className="p-6">
      {children}
    </div>
  );
};

const MultiCampaignDashboard = () => {
  const [selectedRetailer, setSelectedRetailer] = useState('All');
  const [selectedBrand, setSelectedBrand] = useState('All');
  const [selectedMediaType, setSelectedMediaType] = useState('All');
  const [selectedMetric, setSelectedMetric] = useState('ROAS');
  const [showAiWidget, setShowAiWidget] = useState(false);
  
  // Filter the campaign data based on selections
  const filteredCampaigns = campaignData.filter(campaign => {
    if (selectedRetailer !== 'All' && campaign.retailer !== selectedRetailer) return false;
    if (selectedBrand !== 'All' && campaign.brand !== selectedBrand) return false;
    return true;
  });
  
  // Get data for bar chart based on selected metric
  const getBarChartData = () => {
    return filteredCampaigns.map(campaign => {
      const data = { name: campaign.name };
      switch (selectedMetric) {
        case 'ROAS':
          data.value = campaign.roas;
          data.fill = campaign.roas > 4 ? '#4CAF50' : campaign.roas > 3 ? '#FFC107' : '#F44336';
          break;
        case 'Sales Lift %':
          data.value = campaign.salesLift;
          data.fill = campaign.salesLift > 15 ? '#4CAF50' : campaign.salesLift > 10 ? '#FFC107' : '#F44336';
          break;
        case 'Incremental $':
          data.value = campaign.incrementalSales / 1000; // Convert to thousands for display
          data.fill = campaign.incrementalSales > 500000 ? '#4CAF50' : campaign.incrementalSales > 300000 ? '#FFC107' : '#F44336';
          break;
        case 'Impressions':
          data.value = campaign.impressions / 1000000; // Convert to millions for display
          data.fill = campaign.impressions > 5000000 ? '#4CAF50' : campaign.impressions > 3000000 ? '#FFC107' : '#F44336';
          break;
        case 'Budget':
          data.value = campaign.budget / 1000; // Convert to thousands for display
          data.fill = '#2196F3';
          break;
        default:
          data.value = 0;
      }
      return data;
    });
  };

  // Get Y-axis label based on selected metric
  const getYAxisLabel = () => {
    switch (selectedMetric) {
      case 'ROAS':
        return 'ROAS (x)';
      case 'Sales Lift %':
        return 'Sales Lift (%)';
      case 'Incremental $':
        return 'Incremental Sales ($K)';
      case 'Impressions':
        return 'Impressions (M)';
      case 'Budget':
        return 'Budget ($K)';
      default:
        return '';
    }
  };

  // AI Widget text based on current filters
  const getAiSummary = () => {
    if (selectedRetailer === 'All' && selectedBrand === 'All') {
      return `The dashboard is showing all ${filteredCampaigns.length} campaigns across all retailers and brands. The Holiday Special campaign has the highest ${selectedMetric === 'ROAS' ? 'ROAS at 5.2x' : selectedMetric === 'Sales Lift %' ? 'Sales Lift at 24.5%' : selectedMetric === 'Incremental $' ? 'Incremental Sales at $936K' : selectedMetric === 'Impressions' ? 'Impressions at 7.8M' : 'Budget at $180K'}. The South region is showing the strongest performance overall with a ROAS of 4.9x and $12.8M in incremental sales.`;
    } else {
      const retailerText = selectedRetailer !== 'All' ? `for ${selectedRetailer}` : 'across all retailers';
      const brandText = selectedBrand !== 'All' ? `and ${selectedBrand}` : 'across all brands';
      
      return `The dashboard is showing ${filteredCampaigns.length} campaigns ${retailerText} ${brandText}. ${filteredCampaigns.length > 0 ? `The top performing campaign is ${filteredCampaigns.reduce((prev, current) => {
        switch (selectedMetric) {
          case 'ROAS': return (prev.roas > current.roas) ? prev : current;
          case 'Sales Lift %': return (prev.salesLift > current.salesLift) ? prev : current;
          case 'Incremental $': return (prev.incrementalSales > current.incrementalSales) ? prev : current;
          case 'Impressions': return (prev.impressions > current.impressions) ? prev : current;
          case 'Budget': return (prev.budget > current.budget) ? prev : current;
          default: return prev;
        }
      }).name}.` : 'No campaigns match the current filter criteria.'}`;
    }
  };

  return (
    <div className="flex flex-col w-full p-4 bg-gray-50">
      {/* Header and Filters */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Multi-Campaign View</h1>
        <div className="flex gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Retailer</label>
            <select 
              className="bg-white border border-gray-300 rounded px-3 py-1 text-sm"
              value={selectedRetailer}
              onChange={(e) => setSelectedRetailer(e.target.value)}
            >
              {retailers.map(retailer => (
                <option key={retailer} value={retailer}>{retailer}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Brand</label>
            <select 
              className="bg-white border border-gray-300 rounded px-3 py-1 text-sm"
              value={selectedBrand}
              onChange={(e) => setSelectedBrand(e.target.value)}
            >
              {brands.map(brand => (
                <option key={brand} value={brand}>{brand}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Media Type</label>
            <select 
              className="bg-white border border-gray-300 rounded px-3 py-1 text-sm"
              value={selectedMediaType}
              onChange={(e) => setSelectedMediaType(e.target.value)}
            >
              {mediaTypes.map(mediaType => (
                <option key={mediaType} value={mediaType}>{mediaType}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Metric</label>
            <select 
              className="bg-white border border-gray-300 rounded px-3 py-1 text-sm"
              value={selectedMetric}
              onChange={(e) => setSelectedMetric(e.target.value)}
            >
              {metrics.map(metric => (
                <option key={metric} value={metric}>{metric}</option>
              ))}
            </select>
          </div>
          <button 
            onClick={() => setShowAiWidget(!showAiWidget)}
            className="mt-4 flex items-center gap-1 text-indigo-600 font-medium"
          >
            <MessageSquare size={16} />
            {showAiWidget ? 'Hide AI Assistant' : 'Show AI Assistant'}
          </button>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-6">
        {/* Bar Chart */}
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Campaign Performance Comparison - {selectedMetric}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={getBarChartData()}
                  margin={{ top: 20, right: 30, left: 40, bottom: 40 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} />
                  <YAxis label={{ value: getYAxisLabel(), angle: -90, position: 'insideLeft' }} />
                  <Tooltip formatter={(value) => [`${value} ${selectedMetric === 'Incremental $' ? '$K' : selectedMetric === 'Impressions' ? 'M' : selectedMetric === 'Budget' ? '$K' : selectedMetric === 'ROAS' ? 'x' : '%'}`, selectedMetric]} />
                  <Bar dataKey="value" fillOpacity={0.8} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Multi-Line Chart */}
        <Card className="col-span-2">
          <CardHeader>
            <CardTitle>Campaign Performance Over Time</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={timeSeriesData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="week" />
                  <YAxis label={{ value: 'Sales ($K)', angle: -90, position: 'insideLeft' }} />
                  <Tooltip />
                  <Legend />
                  {filteredCampaigns.map(campaign => (
                    <Line
                      key={campaign.name}
                      type="monotone"
                      dataKey={campaign.name}
                      stroke={campaignColors[campaign.name]}
                      activeDot={{ r: 8 }}
                      strokeWidth={2}
                    />
                  ))}
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Geographic Performance or AI Widget */}
        <Card className="col-span-1">
          {showAiWidget ? (
            <>
              <CardHeader>
                <CardTitle>AI Assistant</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100 h-80 overflow-y-auto">
                  <h3 className="text-lg font-medium text-indigo-800 mb-2">Dashboard Summary</h3>
                  <p className="text-gray-800">{getAiSummary()}</p>
                  <div className="mt-4">
                    <h4 className="text-sm font-medium text-indigo-800 mb-2">Ask a question:</h4>
                    <div className="flex gap-2">
                      <input 
                        type="text" 
                        placeholder="What were the top 3 campaigns by ROAS?" 
                        className="flex-1 border border-gray-300 rounded-md px-3 py-2 text-sm" 
                      />
                      <button className="bg-indigo-600 text-white rounded-md px-3 py-2 text-sm">Ask</button>
                    </div>
                    <div className="mt-4">
                      <button className="w-full bg-white border border-indigo-300 text-indigo-700 rounded-md px-3 py-2 text-sm">Generate Full Summary</button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </>
          ) : (
            <>
              <CardHeader>
                <CardTitle>Regional Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80 flex flex-col justify-between">
                  <div className="grid grid-cols-2 gap-4">
                    {regionMetrics.map(region => (
                      <div 
                        key={region.region} 
                        className="p-4 rounded-lg" 
                        style={{ backgroundColor: regionColors[region.region] + '33' }}
                      >
                        <h3 className="font-bold text-lg">{region.region}</h3>
                        <div className="mt-2 space-y-1">
                          <div className="flex justify-between">
                            <span className="text-sm text-gray-600">ROAS:</span>
                            <span className="font-medium">{region.roas}x</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-gray-600">Inc. Sales:</span>
                            <span className="font-medium">${region.incrementalSales}M</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-gray-600">Budget:</span>
                            <span className="font-medium">${region.budget}K</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="text-center text-sm text-gray-500 mt-4">
                    <p>Click region for detailed breakdown</p>
                  </div>
                </div>
              </CardContent>
            </>
          )}
        </Card>

        {/* Tabular View with custom table implementation */}
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Campaign Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Campaign</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Retailer</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Brand</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dates</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Budget</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Impressions</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">CPM</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">ROAS</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Sales Lift %</th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Incremental $</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCampaigns.map(campaign => (